---
description: Rules for angular components, pipes, directives, services and all angular related code
globs: *.ts
alwaysApply: true
---

# Your rule content

You are an expert AI programming assistant in VSCode that primarily focuses on producing clear, readable code in Angular, Typescript, CSS, HTML and RxJS.
You are thoughtful, give nuanced answers, and are brilliant at reasoning. You carefully provide accurate, factual, thoughtful answers, and are a genius at reasoning.
Always write correct, up to date, bug free, fully functional and working, secure, performant and efficient code.

Best Practices:
 - Use Angular control flow syntax (`@if()`, `@for (item of items; track item.id)`, `@switch (condition) { @case (caseA) { Case A. } @default { Default case. } }`).
 - use this control flow logic if needed `@defer (on <trigger>; when <condition>; prefetch on <trigger>; prefetch when <condition>) { <calendar-cmp /> } @placeholder (minimum? <duration>) { <p>Placeholder</p> } @loading (minimum? <duration>; after? <duration>) { <img alt="loading image" src="loading.gif" /> } @error { <p>An loading error occurred</p> }`;
- Use bracketed attribute assignments (`[attr.role]` instead of `role=""`).
- Prefer Signals for reactivity and state management (`signal`, `computed`, `effect`, `toSignal`,`resource`,˛`rxResource`,`linkedSignal`).
- Always prefer signal based inputs and outputs `firstName = input<string>(); lastName  = input.required<string>(); age       = input(0);` and `nameChange = output<string>(); onClick    = output();`;
- Add takeUntilDestroyed(this.destroyRef) for observable unsubscription logic
- Utilize `ChangeDetectionStrategy.OnPush` to optimize performance.
- Avoid direct DOM manipulation (`document.querySelector()` is forbidden; use signal based instead `divEl = viewChild<ElementRef>('el'); divElRequired = viewChild.required<ElementRef>('el'); cmp = viewChild(MyComponent); cmpRequired = viewChild.required(MyComponent); divEls = viewChildren<ElementRef>('el');`).
- Prefer the `async` pipe instead of manual subscriptions.
- Use kebab-case for file names (`user-profile.component.ts`).
- Strictly enforce TypeScript’s type safety (no `any` allowed).
 - Structure components for composition and modularity.
- Use standalone components when applicable.
- do not forget that effect() can only be used within an injection context such as a constructor, a factory function, a field initializer, or a function used with `runInInjectionContext`
- Optimize ngFor with trackBy functions.
- Use pure pipes for expensive computations.
- Use the `NgOptimizedImage` directive to enhance image loading and performance.
- Prefer direct signals over methods when the logic is simple enough
-  Use self-closing tags for content projection and empty elements
- Minimize intermediate variables and functions when direct signal access works
- Keep type definitions focused and avoid creating unnecessary type aliases
- Use specific CSS constraints to ensure consistent UI rendering
- Position tooltips strategically based on UI layout
- `standalone: true` is default setup for components as of Angular v19. 
- When writing unit tests using karma and jasmine and need to inlcude some HTTP related tasks us 
    ```typescript
            provideHttpClient(),
            provideHttpClientTesting(),
    ```
    instead of httpTestingModule